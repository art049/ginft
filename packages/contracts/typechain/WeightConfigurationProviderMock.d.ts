/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface WeightConfigurationProviderMockInterface
  extends ethers.utils.Interface {
  functions: {
    "getDemosWeight(uint256,uint256)": FunctionFragment;
    "getPartnerCommitmentPercent(uint256)": FunctionFragment;
    "getPartnerWeight(uint256,uint256)": FunctionFragment;
    "getRewardWeights(uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getDemosWeight",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPartnerCommitmentPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPartnerWeight",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardWeights",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getDemosWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPartnerCommitmentPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPartnerWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardWeights",
    data: BytesLike
  ): Result;

  events: {};
}

export class WeightConfigurationProviderMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: WeightConfigurationProviderMockInterface;

  functions: {
    getDemosWeight(
      mintersWeight: BigNumberish,
      partnerWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPartnerCommitmentPercent(
      partnerSharePercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPartnerWeight(
      mintersWeight: BigNumberish,
      partnerCommitmentPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRewardWeights(
      mintersWeight: BigNumberish,
      mintersFunding: BigNumberish,
      partnerFunding: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          mintersWeight: BigNumber;
          partnerWeight: BigNumber;
          demosWeight: BigNumber;
          totalWeight: BigNumber;
        }
      ] & {
        weights: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          mintersWeight: BigNumber;
          partnerWeight: BigNumber;
          demosWeight: BigNumber;
          totalWeight: BigNumber;
        };
      }
    >;
  };

  getDemosWeight(
    mintersWeight: BigNumberish,
    partnerWeight: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPartnerCommitmentPercent(
    partnerSharePercent: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPartnerWeight(
    mintersWeight: BigNumberish,
    partnerCommitmentPercent: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRewardWeights(
    mintersWeight: BigNumberish,
    mintersFunding: BigNumberish,
    partnerFunding: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      mintersWeight: BigNumber;
      partnerWeight: BigNumber;
      demosWeight: BigNumber;
      totalWeight: BigNumber;
    }
  >;

  callStatic: {
    getDemosWeight(
      mintersWeight: BigNumberish,
      partnerWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPartnerCommitmentPercent(
      partnerSharePercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPartnerWeight(
      mintersWeight: BigNumberish,
      partnerCommitmentPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardWeights(
      mintersWeight: BigNumberish,
      mintersFunding: BigNumberish,
      partnerFunding: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        mintersWeight: BigNumber;
        partnerWeight: BigNumber;
        demosWeight: BigNumber;
        totalWeight: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    getDemosWeight(
      mintersWeight: BigNumberish,
      partnerWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPartnerCommitmentPercent(
      partnerSharePercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPartnerWeight(
      mintersWeight: BigNumberish,
      partnerCommitmentPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardWeights(
      mintersWeight: BigNumberish,
      mintersFunding: BigNumberish,
      partnerFunding: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getDemosWeight(
      mintersWeight: BigNumberish,
      partnerWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPartnerCommitmentPercent(
      partnerSharePercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPartnerWeight(
      mintersWeight: BigNumberish,
      partnerCommitmentPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardWeights(
      mintersWeight: BigNumberish,
      mintersFunding: BigNumberish,
      partnerFunding: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
