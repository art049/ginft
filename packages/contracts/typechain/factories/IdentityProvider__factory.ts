/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  IdentityProvider,
  IdentityProviderInterface,
} from "../IdentityProvider";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "UserVerified",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "isVerified",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "unverify",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "verify",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6104538061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063b9209e3311610050578063b9209e33146100b4578063e3f8adcd146100f0578063f2fde38b1461010357600080fd5b806363a9c3d714610077578063715018a61461008c5780638da5cb5b14610094575b600080fd5b61008a6100853660046103ef565b610116565b005b61008a6101c4565b6000546040516001600160a01b0390911681526020015b60405180910390f35b6100e06100c23660046103ef565b6001600160a01b031660009081526001602052604090205460ff1690565b60405190151581526020016100ab565b61008a6100fe3660046103ef565b61022a565b61008a6101113660046103ef565b6102a5565b6000546001600160a01b031633146101755760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b0381166000818152600160208190526040808320805460ff1916909217909155517fa6625d2d26e786e2f473111bea4b2fcdbbf1863d883a2359989ce3a103d2972a9190a250565b6000546001600160a01b0316331461021e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161016c565b6102286000610387565b565b6000546001600160a01b031633146102845760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161016c565b6001600160a01b03166000908152600160205260409020805460ff19169055565b6000546001600160a01b031633146102ff5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161016c565b6001600160a01b03811661037b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161016c565b61038481610387565b50565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215610400578081fd5b81356001600160a01b0381168114610416578182fd5b939250505056fea264697066735822122004e939076e04884219e5581361596848d03c36411bcb8b69619f12ffdde96a4664736f6c63430008040033";

export class IdentityProvider__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<IdentityProvider> {
    return super.deploy(overrides || {}) as Promise<IdentityProvider>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): IdentityProvider {
    return super.attach(address) as IdentityProvider;
  }
  connect(signer: Signer): IdentityProvider__factory {
    return super.connect(signer) as IdentityProvider__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): IdentityProviderInterface {
    return new utils.Interface(_abi) as IdentityProviderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IdentityProvider {
    return new Contract(address, _abi, signerOrProvider) as IdentityProvider;
  }
}
