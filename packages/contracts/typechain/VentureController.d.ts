/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface VentureControllerInterface extends ethers.utils.Interface {
  functions: {
    "assetPrices(uint256)": FunctionFragment;
    "assets(uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "exit(address,uint256)": FunctionFragment;
    "fundingPool()": FunctionFragment;
    "getMinters()": FunctionFragment;
    "getPotentialMinters()": FunctionFragment;
    "isBurnAllowed()": FunctionFragment;
    "isClaimAllowed()": FunctionFragment;
    "mint(uint256,uint256,uint256,uint256)": FunctionFragment;
    "mintToken()": FunctionFragment;
    "minters(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "partner()": FunctionFragment;
    "potentialMinters(uint256)": FunctionFragment;
    "randomNumberProvider()": FunctionFragment;
    "randomRequestId()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "selectPotentialMinters(uint256)": FunctionFragment;
    "state()": FunctionFragment;
    "symbol()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "validateDeal()": FunctionFragment;
    "ventureToken()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "assetPrices",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "exit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundingPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPotentialMinters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isBurnAllowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isClaimAllowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "mintToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minters",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "partner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "potentialMinters",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "randomNumberProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "randomRequestId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "selectPotentialMinters",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "state", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "validateDeal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ventureToken",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "assetPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundingPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMinters", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPotentialMinters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBurnAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isClaimAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minters", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "partner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "potentialMinters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "randomNumberProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "randomRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selectPotentialMinters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateDeal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ventureToken",
    data: BytesLike
  ): Result;

  events: {
    "MinterPicked(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PotentialMinterSelected(address)": EventFragment;
    "VentureStateChanged(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MinterPicked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PotentialMinterSelected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VentureStateChanged"): EventFragment;
}

export type MinterPickedEvent = TypedEvent<[string] & { minter: string }>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PotentialMinterSelectedEvent = TypedEvent<
  [string] & { potentialMinter: string }
>;

export type VentureStateChangedEvent = TypedEvent<
  [number] & { newState: number }
>;

export class VentureController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VentureControllerInterface;

  functions: {
    assetPrices(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    assets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, number, string] & {
        token: string;
        decimals: number;
        priceFeed: string;
      }
    >;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    exit(
      exitToken_: string,
      exitTokenAmount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fundingPool(overrides?: CallOverrides): Promise<[string]>;

    getMinters(overrides?: CallOverrides): Promise<[string[]]>;

    getPotentialMinters(overrides?: CallOverrides): Promise<[string[]]>;

    isBurnAllowed(overrides?: CallOverrides): Promise<[boolean]>;

    isClaimAllowed(overrides?: CallOverrides): Promise<[boolean]>;

    mint(
      mintersCount: BigNumberish,
      amountUSD: BigNumberish,
      ventureTokenSupply: BigNumberish,
      partnerAmountUSD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintToken(overrides?: CallOverrides): Promise<[string]>;

    minters(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    partner(overrides?: CallOverrides): Promise<[string]>;

    potentialMinters(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    randomNumberProvider(overrides?: CallOverrides): Promise<[string]>;

    randomRequestId(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    selectPotentialMinters(
      minAmountUSD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    state(overrides?: CallOverrides): Promise<[number]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validateDeal(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ventureToken(overrides?: CallOverrides): Promise<[string]>;
  };

  assetPrices(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  assets(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, number, string] & {
      token: string;
      decimals: number;
      priceFeed: string;
    }
  >;

  decimals(overrides?: CallOverrides): Promise<number>;

  exit(
    exitToken_: string,
    exitTokenAmount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fundingPool(overrides?: CallOverrides): Promise<string>;

  getMinters(overrides?: CallOverrides): Promise<string[]>;

  getPotentialMinters(overrides?: CallOverrides): Promise<string[]>;

  isBurnAllowed(overrides?: CallOverrides): Promise<boolean>;

  isClaimAllowed(overrides?: CallOverrides): Promise<boolean>;

  mint(
    mintersCount: BigNumberish,
    amountUSD: BigNumberish,
    ventureTokenSupply: BigNumberish,
    partnerAmountUSD: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintToken(overrides?: CallOverrides): Promise<string>;

  minters(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  partner(overrides?: CallOverrides): Promise<string>;

  potentialMinters(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  randomNumberProvider(overrides?: CallOverrides): Promise<string>;

  randomRequestId(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  selectPotentialMinters(
    minAmountUSD: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  state(overrides?: CallOverrides): Promise<number>;

  symbol(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validateDeal(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ventureToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    assetPrices(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, number, string] & {
        token: string;
        decimals: number;
        priceFeed: string;
      }
    >;

    decimals(overrides?: CallOverrides): Promise<number>;

    exit(
      exitToken_: string,
      exitTokenAmount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fundingPool(overrides?: CallOverrides): Promise<string>;

    getMinters(overrides?: CallOverrides): Promise<string[]>;

    getPotentialMinters(overrides?: CallOverrides): Promise<string[]>;

    isBurnAllowed(overrides?: CallOverrides): Promise<boolean>;

    isClaimAllowed(overrides?: CallOverrides): Promise<boolean>;

    mint(
      mintersCount: BigNumberish,
      amountUSD: BigNumberish,
      ventureTokenSupply: BigNumberish,
      partnerAmountUSD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintToken(overrides?: CallOverrides): Promise<string>;

    minters(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    partner(overrides?: CallOverrides): Promise<string>;

    potentialMinters(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    randomNumberProvider(overrides?: CallOverrides): Promise<string>;

    randomRequestId(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    selectPotentialMinters(
      minAmountUSD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    state(overrides?: CallOverrides): Promise<number>;

    symbol(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    validateDeal(overrides?: CallOverrides): Promise<void>;

    ventureToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "MinterPicked(address)"(
      minter?: null
    ): TypedEventFilter<[string], { minter: string }>;

    MinterPicked(minter?: null): TypedEventFilter<[string], { minter: string }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "PotentialMinterSelected(address)"(
      potentialMinter?: null
    ): TypedEventFilter<[string], { potentialMinter: string }>;

    PotentialMinterSelected(
      potentialMinter?: null
    ): TypedEventFilter<[string], { potentialMinter: string }>;

    "VentureStateChanged(uint8)"(
      newState?: null
    ): TypedEventFilter<[number], { newState: number }>;

    VentureStateChanged(
      newState?: null
    ): TypedEventFilter<[number], { newState: number }>;
  };

  estimateGas: {
    assetPrices(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assets(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    exit(
      exitToken_: string,
      exitTokenAmount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fundingPool(overrides?: CallOverrides): Promise<BigNumber>;

    getMinters(overrides?: CallOverrides): Promise<BigNumber>;

    getPotentialMinters(overrides?: CallOverrides): Promise<BigNumber>;

    isBurnAllowed(overrides?: CallOverrides): Promise<BigNumber>;

    isClaimAllowed(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      mintersCount: BigNumberish,
      amountUSD: BigNumberish,
      ventureTokenSupply: BigNumberish,
      partnerAmountUSD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintToken(overrides?: CallOverrides): Promise<BigNumber>;

    minters(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    partner(overrides?: CallOverrides): Promise<BigNumber>;

    potentialMinters(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    randomNumberProvider(overrides?: CallOverrides): Promise<BigNumber>;

    randomRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    selectPotentialMinters(
      minAmountUSD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    state(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validateDeal(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ventureToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    assetPrices(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exit(
      exitToken_: string,
      exitTokenAmount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fundingPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMinters(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPotentialMinters(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isBurnAllowed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isClaimAllowed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      mintersCount: BigNumberish,
      amountUSD: BigNumberish,
      ventureTokenSupply: BigNumberish,
      partnerAmountUSD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minters(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    partner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    potentialMinters(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    randomNumberProvider(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    randomRequestId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    selectPotentialMinters(
      minAmountUSD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    state(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validateDeal(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ventureToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
